package com.formssi.fisco.bcos.solidity;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray2;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple10;
import org.fisco.bcos.web3j.tuples.generated.Tuple11;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class PhylogeneticTree extends Contract {
    public static String BINARY = "60806040526110066000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b50614734806100626000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806334a18dda1461009e57806379fa913f146101115780639b492a681461017a578063bca926af14610280578063d39f70bc14610297578063dd1d9bdf146102ae578063e2937e5b146104ed578063efc81a8c14610736578063fcd7e3c114610761575b600080fd5b3480156100aa57600080fd5b5061010f600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610835565b005b34801561011d57600080fd5b50610178600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506109a6565b005b34801561018657600080fd5b506101e1600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b0e565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561022857808201518184015260208101905061020d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561026a57808201518184015260208101905061024f565b5050505090500194505050505060405180910390f35b34801561028c57600080fd5b506102956113ef565b005b3480156102a357600080fd5b506102ac611531565b005b3480156102ba57600080fd5b506104d7600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611671565b6040518082815260200191505060405180910390f35b3480156104f957600080fd5b50610720600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506128e1565b6040518082815260200191505060405180910390f35b34801561074257600080fd5b5061074b613aed565b6040518082815260200191505060405180910390f35b34801561076d57600080fd5b506107c8600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613e85565b6040518083600260200280838360005b838110156107f35780820151818401526020810190506107d8565b5050505090500182600260200280838360005b83811015610821578082015181840152602081019050610806565b505050509050019250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630553904e3084846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156109185780820151818401526020810190506108fd565b50505050905090810190601f1680156109455780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561096657600080fd5b505af115801561097a573d6000803e3d6000fd5b505050506040513d602081101561099057600080fd5b8101908080519060200190929190505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311e3f2af30836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a82578082015181840152602081019050610a67565b50505050905090810190601f168015610aaf5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050506040513d6020811015610af957600080fd5b81019080805190602001909291905050505050565b606080610b196145db565b606080600080611001856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050846020015173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252601d8152602001807f745f6d756c746970617274795f63616c63756c6174696f6e5f7461736b000000815250602001915050602060405180830381600087803b158015610bfd57600080fd5b505af1158015610c11573d6000803e3d6000fd5b505050506040513d6020811015610c2757600080fd5b8101908080519060200190929190505050856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050846040015173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610cd757600080fd5b505af1158015610ceb573d6000803e3d6000fd5b505050506040513d6020811015610d0157600080fd5b8101908080519060200190929190505050856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050846040015173ffffffffffffffffffffffffffffffffffffffff1663e8434e398987606001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610e0c578082015181840152602081019050610df1565b50505050905090810190601f168015610e395780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610e5957600080fd5b505af1158015610e6d573d6000803e3d6000fd5b505050506040513d6020811015610e8357600080fd5b81019080805190602001909291905050508560c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508460c0015173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f3357600080fd5b505af1158015610f47573d6000803e3d6000fd5b505050506040513d6020811015610f5d57600080fd5b8101908080519060200190929190505050604051908082528060200260200182016040528015610f9c5781602001602082028038833980820191505090505b5093508460c0015173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561100757600080fd5b505af115801561101b573d6000803e3d6000fd5b505050506040513d602081101561103157600080fd5b81019080805190602001909291905050506040519080825280602002602001820160405280156110705781602001602082028038833980820191505090505b509250600091505b8460c0015173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110e057600080fd5b505af11580156110f4573d6000803e3d6000fd5b505050506040513d602081101561110a57600080fd5b81019080805190602001909291905050508212156113df578460c0015173ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561119557600080fd5b505af11580156111a9573d6000803e3d6000fd5b505050506040513d60208110156111bf57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f7461736b4e6f0000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561127257600080fd5b505af1158015611286573d6000803e3d6000fd5b505050506040513d602081101561129c57600080fd5b810190808051906020019092919050505084838151811015156112bb57fe5b9060200190602002019060001916908160001916815250508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f7573657249640000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561137357600080fd5b505af1158015611387573d6000803e3d6000fd5b505050506040513d602081101561139d57600080fd5b810190808051906020019092919050505083838151811015156113bc57fe5b906020019060200201906000191690816000191681525050816001019150611078565b8383965096505050505050915091565b6114a260a060405190810160405280606781526020017f696e73746572744d756c7469706172747943616c63756c6174696f6e5461736b81526020017f28737472696e672c737472696e672c696e743235362c696e743235362c696e7481526020017f3235362c737472696e672c737472696e672c737472696e672c737472696e672c81526020017f737472696e6729000000000000000000000000000000000000000000000000008152506001610835565b61152f608060405190810160405280605f81526020017f696e73746572745461736b4d656d62657228737472696e672c737472696e672c81526020017f696e743235362c696e743235362c737472696e672c737472696e672c7374726981526020017f6e672c696e743235362c737472696e672c737472696e672c696e7432353629008152506001610835565b565b6115e260a060405190810160405280606e81526020017f696e73746572744d756c7469706172747943616c63756c6174696f6e5461736b81526020017f28737472696e672c737472696e672c696e743235362c696e743235362c73747281526020017f696e672c737472696e672c737472696e672c737472696e672c696e743235362c81526020017f737472696e672c737472696e67290000000000000000000000000000000000008152506109a6565b61166f608060405190810160405280605f81526020017f696e73746572745461736b4d656d62657228737472696e672c737472696e672c81526020017f696e743235362c696e743235362c737472696e672c737472696e672c7374726981526020017f6e672c696e743235362c737472696e672c737472696e672c696e7432353629008152506001610835565b565b600061167b6145db565b6000816000018181525050611001816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806020015173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252601d8152602001807f745f6d756c746970617274795f63616c63756c6174696f6e5f7461736b000000815250602001915050602060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b505050506040513d602081101561178e57600080fd5b8101908080519060200190929190505050816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561183e57600080fd5b505af1158015611852573d6000803e3d6000fd5b505050506040513d602081101561186857600080fd5b8101908080519060200190929190505050816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561191857600080fd5b505af115801561192c573d6000803e3d6000fd5b505050506040513d602081101561194257600080fd5b8101908080519060200190929190505050816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f6e756d6265720000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015611a4e578082015181840152602081019050611a33565b50505050905090810190601f168015611a7b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611a9b57600080fd5b505af1158015611aaf573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f6e616d6500000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015611b77578082015181840152602081019050611b5c565b50505050905090810190601f168015611ba45780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611bc457600080fd5b505af1158015611bd8573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260098152602001807f6a6f696e436f756e74000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611c8857600080fd5b505af1158015611c9c573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600a8152602001807f64617461416d6f756e740000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611d4c57600080fd5b505af1158015611d60573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600a8152602001807f64617461536f757263650000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611e1057600080fd5b505af1158015611e24573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f646174614e616d65000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015611eec578082015181840152602081019050611ed1565b50505050905090810190601f168015611f195780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611f3957600080fd5b505af1158015611f4d573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f6372656174655573657249640000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612015578082015181840152602081019050611ffa565b50505050905090810190601f1680156120425780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561206257600080fd5b505af1158015612076573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600a8152602001807f63726561746554696d6500000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561213e578082015181840152602081019050612123565b50505050905090810190601f16801561216b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561218b57600080fd5b505af115801561219f573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600a8152602001807f66696e69736854696d6500000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561226757808201518184015260208101905061224c565b50505050905090810190601f1680156122945780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156122b457600080fd5b505af11580156122c8573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b516846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600e8152602001807f726573756c7446696c6550617468000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612390578082015181840152602081019050612375565b50505050905090810190601f1680156123bd5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156123dd57600080fd5b505af11580156123f1573d6000803e3d6000fd5b50505050806040015173ffffffffffffffffffffffffffffffffffffffff1663e8434e398d83606001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156124b857808201518184015260208101905061249d565b50505050905090810190601f1680156124e55780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561250557600080fd5b505af1158015612519573d6000803e3d6000fd5b505050506040513d602081101561252f57600080fd5b81019080805190602001909291905050508160c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008160c0015173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156125e157600080fd5b505af11580156125f5573d6000803e3d6000fd5b505050506040513d602081101561260b57600080fd5b810190808051906020019092919050505013151561282857806040015173ffffffffffffffffffffffffffffffffffffffff166331afac368d83608001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156126e65780820151818401526020810190506126cb565b50505050905090810190601f1680156127135780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561273357600080fd5b505af1158015612747573d6000803e3d6000fd5b505050506040513d602081101561275d57600080fd5b81019080805190602001909291905050508160000181815250507f309840181b3dd447ad038af0d1590b70d7f24be98e6bdadf6d8fe479bba06fd960018d6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156127e15780820151818401526020810190506127c6565b50505050905090810190601f16801561280e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1806000015191506128d2565b7f309840181b3dd447ad038af0d1590b70d7f24be98e6bdadf6d8fe479bba06fd960008d6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612892578082015181840152602081019050612877565b50505050905090810190601f1680156128bf5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1600091505b509a9950505050505050505050565b60006128eb6145db565b6000816000018181525050611001816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806020015173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f7461736b5f6d656d62657200000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156129d457600080fd5b505af11580156129e8573d6000803e3d6000fd5b505050506040513d60208110156129fe57600080fd5b8101908080519060200190929190505050816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612aae57600080fd5b505af1158015612ac2573d6000803e3d6000fd5b505050506040513d6020811015612ad857600080fd5b8101908080519060200190929190505050816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612b8857600080fd5b505af1158015612b9c573d6000803e3d6000fd5b505050506040513d6020811015612bb257600080fd5b8101908080519060200190929190505050816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f7461736b4e6f0000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612cbe578082015181840152602081019050612ca3565b50505050905090810190601f168015612ceb5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612d0b57600080fd5b505af1158015612d1f573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f757365724964000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015612dcf57600080fd5b505af1158015612de3573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f726f6c650000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015612e9357600080fd5b505af1158015612ea7573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f6869736f72795461736b4e6f0000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612f6f578082015181840152602081019050612f54565b50505050905090810190601f168015612f9c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015612fbc57600080fd5b505af1158015612fd0573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600d8152602001807f666173746146696c655575696400000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561309857808201518184015260208101905061307d565b50505050905090810190601f1680156130c55780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156130e557600080fd5b505af11580156130f9573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600d8152602001807f666173746146696c654861736800000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156131c15780820151818401526020810190506131a6565b50505050905090810190601f1680156131ee5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561320e57600080fd5b505af1158015613222573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600f8152602001807f666173746144617461416d6f756e74000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156132d257600080fd5b505af11580156132e6573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600b8152602001807f74737646696c6555756964000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156133ae578082015181840152602081019050613393565b50505050905090810190601f1680156133db5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156133fb57600080fd5b505af115801561340f573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600b8152602001807f74737646696c6548617368000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156134d75780820151818401526020810190506134bc565b50505050905090810190601f1680156135045780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561352457600080fd5b505af1158015613538573d6000803e3d6000fd5b50505050806080015173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600d8152602001807f74737644617461416d6f756e740000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156135e857600080fd5b505af11580156135fc573d6000803e3d6000fd5b50505050806040015173ffffffffffffffffffffffffffffffffffffffff1663e8434e398e83606001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156136c35780820151818401526020810190506136a8565b50505050905090810190601f1680156136f05780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561371057600080fd5b505af1158015613724573d6000803e3d6000fd5b505050506040513d602081101561373a57600080fd5b81019080805190602001909291905050508160c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008160c0015173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156137ec57600080fd5b505af1158015613800573d6000803e3d6000fd5b505050506040513d602081101561381657600080fd5b8101908080519060200190929190505050131515613a3357806040015173ffffffffffffffffffffffffffffffffffffffff166331afac368e83608001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156138f15780820151818401526020810190506138d6565b50505050905090810190601f16801561391e5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561393e57600080fd5b505af1158015613952573d6000803e3d6000fd5b505050506040513d602081101561396857600080fd5b81019080805190602001909291905050508160000181815250507f309840181b3dd447ad038af0d1590b70d7f24be98e6bdadf6d8fe479bba06fd960018e6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156139ec5780820151818401526020810190506139d1565b50505050905090810190601f168015613a195780820380516001836020036101000a031916815260200191505b50935050505060405180910390a180600001519150613add565b7f309840181b3dd447ad038af0d1590b70d7f24be98e6bdadf6d8fe479bba06fd960008e6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613a9d578082015181840152602081019050613a82565b50505050905090810190601f168015613aca5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1600091505b509b9a5050505050505050505050565b60008060008061100192508273ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452601d8152602001807f745f6d756c746970617274795f63616c63756c6174696f6e5f7461736b000000815250602001848103835260028152602001807f6e6f000000000000000000000000000000000000000000000000000000000000815250602001848103825260668152602001807f6e756d6265722c6e616d652c6a6f696e436f756e742c64617461416d6f756e7481526020017f2c64617461536f757263652c646174614e616d652c637265617465557365724981526020017f642c63726561746554696d652c66696e69736854696d652c726573756c74466981526020017f6c655061746800000000000000000000000000000000000000000000000000008152506080019350505050602060405180830381600087803b158015613c7c57600080fd5b505af1158015613c90573d6000803e3d6000fd5b505050506040513d6020811015613ca657600080fd5b810190808051906020019092919050505091508273ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452600d8152602001807f745f7461736b5f6d656d62657200000000000000000000000000000000000000815250602001848103835260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001848103825260718152602001807f7461736b4e6f2c7573657249642c726f6c652c6869736f72795461736b4e6f2c81526020017f666173746146696c65557569642c666173746146696c65486173682c6661737481526020017f6144617461416d6f756e742c74737646696c65557569642c74737646696c654881526020017f6173682c74737644617461416d6f756e740000000000000000000000000000008152506080019350505050602060405180830381600087803b158015613e3d57600080fd5b505af1158015613e51573d6000803e3d6000fd5b505050506040513d6020811015613e6757600080fd5b81019080805190602001909291905050509050808201935050505090565b613e8d61469d565b613e9561469d565b613e9d6145db565b613ea56146bf565b600080611001846020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050836020015173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252601d8152602001807f745f6d756c746970617274795f63616c63756c6174696f6e5f7461736b000000815250602001915050602060405180830381600087803b158015613f8657600080fd5b505af1158015613f9a573d6000803e3d6000fd5b505050506040513d6020811015613fb057600080fd5b8101908080519060200190929190505050846040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050836040015173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561406057600080fd5b505af1158015614074573d6000803e3d6000fd5b505050506040513d602081101561408a57600080fd5b8101908080519060200190929190505050846060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050836040015173ffffffffffffffffffffffffffffffffffffffff1663e8434e398886606001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561419557808201518184015260208101905061417a565b50505050905090810190601f1680156141c25780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156141e257600080fd5b505af11580156141f6573d6000803e3d6000fd5b505050506040513d602081101561420c57600080fd5b81019080805190602001909291905050508460c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600091505b8360c0015173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156142c157600080fd5b505af11580156142d5573d6000803e3d6000fd5b505050506040513d60208110156142eb57600080fd5b81019080805190602001909291905050508212156145be578360c0015173ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561437657600080fd5b505af115801561438a573d6000803e3d6000fd5b505050506040513d60208110156143a057600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6e616d6500000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561445357600080fd5b505af1158015614467573d6000803e3d6000fd5b505050506040513d602081101561447d57600080fd5b81019080805190602001909291905050508360000151836002811015156144a057fe5b602002019060001916908160001916815250508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260028152602001807f6e6f000000000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561455357600080fd5b505af1158015614567573d6000803e3d6000fd5b505050506040513d602081101561457d57600080fd5b81019080805190602001909291905050508360200151836002811015156145a057fe5b60200201906000191690816000191681525050816001019150614259565b826000015183602001518191508090509550955050505050915091565b60e06040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040805190810160405280600290602082028038833980820191505090505090565b6080604051908101604052806146d36146e6565b81526020016146e06146e6565b81525090565b60408051908101604052806002906020820280388339808201915050905050905600a165627a7a72305820e6b72a82e8b7cd7ccde10096097858341bb622020b5c6db29f72c431f9ef04730029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\"}],\"name\":\"registerParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"}],\"name\":\"unregisterParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_no\",\"type\":\"string\"}],\"name\":\"select2\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_no\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_joinCount\",\"type\":\"int256\"},{\"name\":\"_dataAmount\",\"type\":\"int256\"},{\"name\":\"_dataSource\",\"type\":\"int256\"},{\"name\":\"_dataName\",\"type\":\"string\"},{\"name\":\"_createUserId\",\"type\":\"string\"},{\"name\":\"_createTime\",\"type\":\"string\"},{\"name\":\"_finishTime\",\"type\":\"string\"},{\"name\":\"_resultFilePath\",\"type\":\"string\"}],\"name\":\"instertMultipartyCalculationTask\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_taskNo\",\"type\":\"string\"},{\"name\":\"_userId\",\"type\":\"int256\"},{\"name\":\"_role\",\"type\":\"int256\"},{\"name\":\"_hisoryTaskNo\",\"type\":\"string\"},{\"name\":\"_fastaFileUuid\",\"type\":\"string\"},{\"name\":\"_fastaFileHash\",\"type\":\"string\"},{\"name\":\"_fastaDataAmount\",\"type\":\"int256\"},{\"name\":\"_tsvFileUuid\",\"type\":\"string\"},{\"name\":\"_tsvFileHash\",\"type\":\"string\"},{\"name\":\"_tsvDataAmount\",\"type\":\"int256\"}],\"name\":\"instertTaskMember\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_no\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[2]\"},{\"name\":\"\",\"type\":\"bytes32[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"flag\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"OrderNo\",\"type\":\"string\"}],\"name\":\"txlogs\",\"type\":\"event\"}]";

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_SELECT2 = "select2";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_DISABLEPARALLEL = "disableParallel";

    public static final String FUNC_INSTERTMULTIPARTYCALCULATIONTASK = "instertMultipartyCalculationTask";

    public static final String FUNC_INSTERTTASKMEMBER = "instertTaskMember";

    public static final String FUNC_CREATE = "create";

    public static final String FUNC_SELECT = "select";

    public static final Event TXLOGS_EVENT = new Event("txlogs", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected PhylogeneticTree(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PhylogeneticTree(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PhylogeneticTree(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PhylogeneticTree(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> registerParallelFunction(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(criticalSize)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerParallelFunction(String functionName, BigInteger criticalSize, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(criticalSize)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerParallelFunctionSeq(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(criticalSize)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, BigInteger> getRegisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> unregisterParallelFunction(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unregisterParallelFunctionSeq(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getUnregisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERPARALLELFUNCTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple2<List<byte[]>, List<byte[]>>> select2(String _no) {
        final Function function = new Function(FUNC_SELECT2, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple2<List<byte[]>, List<byte[]>>>(
                new Callable<Tuple2<List<byte[]>, List<byte[]>>>() {
                    @Override
                    public Tuple2<List<byte[]>, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<byte[]>, List<byte[]>>(
                                convertToNative((List<Bytes32>) results.get(0).getValue()), 
                                convertToNative((List<Bytes32>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> enableParallel() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void enableParallel(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String enableParallelSeq() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> disableParallel() {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void disableParallel(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String disableParallelSeq() {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> instertMultipartyCalculationTask(String _no, String _name, BigInteger _joinCount, BigInteger _dataAmount, BigInteger _dataSource, String _dataName, String _createUserId, String _createTime, String _finishTime, String _resultFilePath) {
        final Function function = new Function(
                FUNC_INSTERTMULTIPARTYCALCULATIONTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_no), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_joinCount), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_dataAmount), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_dataSource), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_dataName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_createUserId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_createTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_finishTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_resultFilePath)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void instertMultipartyCalculationTask(String _no, String _name, BigInteger _joinCount, BigInteger _dataAmount, BigInteger _dataSource, String _dataName, String _createUserId, String _createTime, String _finishTime, String _resultFilePath, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_INSTERTMULTIPARTYCALCULATIONTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_no), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_joinCount), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_dataAmount), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_dataSource), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_dataName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_createUserId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_createTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_finishTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_resultFilePath)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String instertMultipartyCalculationTaskSeq(String _no, String _name, BigInteger _joinCount, BigInteger _dataAmount, BigInteger _dataSource, String _dataName, String _createUserId, String _createTime, String _finishTime, String _resultFilePath) {
        final Function function = new Function(
                FUNC_INSTERTMULTIPARTYCALCULATIONTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_no), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_joinCount), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_dataAmount), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_dataSource), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_dataName), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_createUserId), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_createTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_finishTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_resultFilePath)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple10<String, String, BigInteger, BigInteger, BigInteger, String, String, String, String, String> getInstertMultipartyCalculationTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSTERTMULTIPARTYCALCULATIONTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple10<String, String, BigInteger, BigInteger, BigInteger, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue(), 
                (String) results.get(8).getValue(), 
                (String) results.get(9).getValue()
                );
    }

    public Tuple1<BigInteger> getInstertMultipartyCalculationTaskOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSTERTMULTIPARTYCALCULATIONTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> instertTaskMember(String _id, String _taskNo, BigInteger _userId, BigInteger _role, String _hisoryTaskNo, String _fastaFileUuid, String _fastaFileHash, BigInteger _fastaDataAmount, String _tsvFileUuid, String _tsvFileHash, BigInteger _tsvDataAmount) {
        final Function function = new Function(
                FUNC_INSTERTTASKMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_taskNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_userId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_role), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_hisoryTaskNo), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_fastaFileUuid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_fastaFileHash), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_fastaDataAmount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_tsvFileUuid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_tsvFileHash), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_tsvDataAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void instertTaskMember(String _id, String _taskNo, BigInteger _userId, BigInteger _role, String _hisoryTaskNo, String _fastaFileUuid, String _fastaFileHash, BigInteger _fastaDataAmount, String _tsvFileUuid, String _tsvFileHash, BigInteger _tsvDataAmount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_INSTERTTASKMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_taskNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_userId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_role), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_hisoryTaskNo), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_fastaFileUuid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_fastaFileHash), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_fastaDataAmount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_tsvFileUuid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_tsvFileHash), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_tsvDataAmount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String instertTaskMemberSeq(String _id, String _taskNo, BigInteger _userId, BigInteger _role, String _hisoryTaskNo, String _fastaFileUuid, String _fastaFileHash, BigInteger _fastaDataAmount, String _tsvFileUuid, String _tsvFileHash, BigInteger _tsvDataAmount) {
        final Function function = new Function(
                FUNC_INSTERTTASKMEMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_taskNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_userId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_role), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_hisoryTaskNo), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_fastaFileUuid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_fastaFileHash), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_fastaDataAmount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_tsvFileUuid), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_tsvFileHash), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(_tsvDataAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple11<String, String, BigInteger, BigInteger, String, String, String, BigInteger, String, String, BigInteger> getInstertTaskMemberInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSTERTTASKMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple11<String, String, BigInteger, BigInteger, String, String, String, BigInteger, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (String) results.get(8).getValue(), 
                (String) results.get(9).getValue(), 
                (BigInteger) results.get(10).getValue()
                );
    }

    public Tuple1<BigInteger> getInstertTaskMemberOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSTERTTASKMEMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> create() {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void create(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createSeq() {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getCreateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple2<List<byte[]>, List<byte[]>>> select(String _no) {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray2<Bytes32>>() {}, new TypeReference<StaticArray2<Bytes32>>() {}));
        return new RemoteCall<Tuple2<List<byte[]>, List<byte[]>>>(
                new Callable<Tuple2<List<byte[]>, List<byte[]>>>() {
                    @Override
                    public Tuple2<List<byte[]>, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<byte[]>, List<byte[]>>(
                                convertToNative((List<Bytes32>) results.get(0).getValue()), 
                                convertToNative((List<Bytes32>) results.get(1).getValue()));
                    }
                });
    }

    public List<TxlogsEventResponse> getTxlogsEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TXLOGS_EVENT, transactionReceipt);
        ArrayList<TxlogsEventResponse> responses = new ArrayList<TxlogsEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TxlogsEventResponse typedResponse = new TxlogsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.flag = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.OrderNo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registertxlogsEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TXLOGS_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registertxlogsEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TXLOGS_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static PhylogeneticTree load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PhylogeneticTree(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PhylogeneticTree load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PhylogeneticTree(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PhylogeneticTree load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PhylogeneticTree(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PhylogeneticTree load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PhylogeneticTree(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PhylogeneticTree> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PhylogeneticTree.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PhylogeneticTree> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PhylogeneticTree.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<PhylogeneticTree> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PhylogeneticTree.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PhylogeneticTree> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PhylogeneticTree.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class TxlogsEventResponse {
        public Log log;

        public BigInteger flag;

        public String OrderNo;
    }
}
